{
  // https://www.typescriptlang.org/tsconfig#module
  "compilerOptions": {
    // module system used. This is for the import statements. "CommonJS", "ES2020"
    "module": "CommonJS",
    // Needs to be specified if "module" is AMD/UMD/System/ES6
    "moduleResolution": "node",
    "noImplicitAny": true,
    "preserveConstEnums": true,
    "resolveJsonModule": true,
    // Import non-ES modules as default imports.
    "esModuleInterop": true,
    // Target latest version of ECMAScript available (ES2020). This is for our code (and not imported code)
    "target": "ES2019",
    // default set of type definitions for built-in JS APIs. Which this a lot of default JS objects become available 
    "lib": ["ES2019", "DOM"],
    // Enable strictest settings like strictNullChecks & noImplicitAny. Needed for Typescript to understand complex types
    "strict": true,
    // allow jsx syntax
    "jsx": "preserve",
    "noUnusedLocals": false,
    "noUnusedParameters": false,
    // Search under node_modules for non-relative imports.
    // "moduleResolution": "node", //Not needed - its the default
    // Process & infer types from .js files
    // "allowJs": true, //Not needed yet
    // Don't emit js files; allow Babel to transform files. Not making true here as watch mode needs emit
    // Instead of setting this here, we control it using --noEmit in package.json
    // "noEmit": true,
    // Generate .d.ts files
    "declaration": true
  },
  "include": ["src/**/*", "dev/**/*", "test/**/*"]
}
